def appearance(intervals):
    # список для хранения интервалов урока, захода и выхода преподавателя и ученика
    # список состоит из списков
    # в каждом вложенном списке 2 элемента, время и тип интервала(1 или -1)
    # 1 - время начала интервала, -1 это время конца интервала
    time_list = []
    # цикл для прохода по всем значения списка test
    for value in intervals.values():
        # цикл для прохода по всем значения словаря data
        # цикл для проверки списка входящих данных на
        # аномалии(текущее значение времени > следующего значения времени)
        for i in range(len(value)):
            if i == 0:
                true_value = value[i]
            if value[i] >= true_value:
                true_value = value[i]
                if len(time_list) % 2 == 0:
                    time_list.append([value[i], 1])
                elif len(time_list) % 2 == 1:
                    time_list.append([value[i], -1])
            # если предыдущий элемент меньше текущего и является четным(начало интервала) и
            # меньше следующего значения(конца интервала), но не последний,
            # то присваиваем значению начала интервала, значение последнего конца интервала
            elif i < len(value) and i % 2 == 0 and true_value < value[i+1]:
                    time_list.append([true_value, 1])
        # если корректный список получился нечетным, объедениям последний элемент списка с последним заходом
        if len(time_list) % 2 != 0:
            for i in range(len(time_list)):
                if i == len(time_list) - 2:
                    time_list.remove(time_list[i])
                    time_list[i][1] = -1
    time_list.sort()
    start_time = 0
    # счетчик для расчета списка
    schet = 0
    result = 0
    # проходим отсортированный список
    for j in time_list:
        schet += j[1]
        # если счетчик = 3 - это начало интервала нахождения ученика и учителя
        if schet == 3:
            start_time = j[0]
        # если счетчик = 2 - это конец интервала нахождения ученика и учителя
        elif schet == 2 and start_time > 0:
            result += j[0] - start_time
    return result


tests = [
    {'data': {'lesson': [1594663200, 1594666800],
             'pupil': [1594663340, 1594663389, 1594663390, 1594663395, 1594663396, 1594666472],
             'tutor': [1594663290, 1594663430, 1594663443, 1594666473]},
     'answer': 3117
    },
    {'data': {'lesson': [1594702800, 1594706400],
             'pupil': [1594702789, 1594704500, 1594702807, 1594704542, 1594704512, 1594704513, 1594704564, 1594705150,
                       1594704581, 1594704582, 1594704734, 1594705009, 1594705095, 1594705096, 1594705106, 1594706480,
                       1594705158, 1594705773, 1594705849, 1594706480, 1594706500, 1594706875, 1594706502, 1594706503,
                       1594706524, 1594706524, 1594706579, 1594706641],
             'tutor': [1594700035, 1594700364, 1594702749, 1594705148, 1594705149, 1594706463]},
    'answer': 3577
    },
    {'data': {'lesson': [1594692000, 1594695600],
             'pupil': [1594692033, 1594696347],
             'tutor': [1594692017, 1594692066, 1594692068, 1594696341]},
    'answer': 3565
    },
]


if __name__ == '__main__':
   for i, test in enumerate(tests):
       test_answer = appearance(test['data'])
       assert test_answer == test['answer'], f'Error on test case {i}, got {test_answer}, expected {test["answer"]}'
